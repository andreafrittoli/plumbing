apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: check-git-files-changed
  namespace: tektonci
  annotations:
    description: |
      Succeeds if any of the files changed in the last N commits from the
      revision defined in the git resource matches the regular expression
spec:
  params:
    - name: gitCloneDepth
      description: Number of commits + 1
    - name: regex
      description: Regular expression to match files changed
  resources:
    - name: source
      type: git
  check:
    image: alpine/git
    script: |
      #!/bin/sh
      set -ex
      set -o pipefail

      BACK="HEAD~$(( $(params.gitCloneDepth) - 1 ))"

      cd $(resources.source.path)
      git diff-tree --no-commit-id --name-only -r HEAD $BACK | \
          grep -E '$(params.regex)'
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: check-name-matches
  namespace: tektonci
  annotations:
    description: |
      Succeeds if the name of the CI Job (GitHub Check) matches the regular
      expression specified. This is used for the "/test" command in GitHub.
      The regular expression cannot contain spaces.
spec:
  params:
    - name: gitHubCommand
      description: The whole comment left on GitHub
    - name: checkName
      description: The name of the check
  check:
    image: alpine
    script: |
      #!/bin/sh
      set -ex
      set -o pipefail

      # TODO(afrittoli) We might want to move this to an external script so
      # we can attach unit tests to it.

      # If no command was specified, the check is successful
      [[ "$(params.gitHubCommand)" == "" ]] && exit 0

      # If a command was specified, the regex should match the checkName
      REGEX="$(echo $(params.gitHubCommand) | awk '{ print $2}')"
      [[ "$REGEX" == "" ]] && REGEX='.*'
      echo "$(params.checkName)" | grep -E "$REGEX"
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: check-triggered-by-github
  namespace: tektonci
  annotations:
    description: |
      Succeeds if the value of the User-Agent matches "GitHub-". This check
      is used to know whether the pipeline was triggered by a GitHub event
      directly of by a Tekton cloud event.
spec:
  params:
    - name: userAgent
      description: The user agent from the pipeline trigger
  check:
    image: alpine
    script: |
      #!/bin/sh
      set -ex
      set -o pipefail

      # If no user-agent was specified, fail
      [[ "$(params.userAgent)" == "" ]] && exit 1

      REGEX="^GitHub-"
      echo "$(params.userAgent)" | grep -E $REGEX
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: check-files-and-trigger
  namespace: tektonci
  annotations:
    description: |
      Succeeds if the files in the PR do not match a specified regex or
      if the value of the User-Agent does not match "GitHub-".
      When a pipeline was triggered by a GitHub event directly, we shall
      run it only if it does not include changes to the CI Jobs themselves.
spec:
  params:
    - name: userAgent
      description: The user agent from the pipeline trigger
    - name: gitCloneDepth
      description: Number of commits + 1
    - name: regex
      description: Regular expression to match files changed
  resources:
    - name: source
      type: git
  check:
    image: alpine/git
    script: |
      #!/bin/sh
      set -ex
      set -o pipefail

      BACK="HEAD~$(( $(params.gitCloneDepth) - 1 ))"

      NO_FILE_MATCH=0
      cd $(resources.source.path)
      git diff-tree --no-commit-id --name-only -r HEAD $BACK | \
          grep -E '$(params.regex)' || NO_FILE_MATCH=1

      NOT_TRIGGERED_BY_GITHUB=0
      REGEX="^GitHub-"
      echo '$(params.userAgent)' | grep -E $REGEX || NOT_TRIGGERED_BY_GITHUB=1

      # If the PR did not touch any file that matches regex, pass
      if [[ $NO_FILE_MATCH -eq 1 ]]; then
        exit 0
      fi

      # If the PR did touch files that match the regex, however this pipeline
      # was not triggered by GitHub directly, pass
      if [[ $NOT_TRIGGERED_BY_GITHUB -eq 1 ]]; then
        exit 0
      fi

      exit 1